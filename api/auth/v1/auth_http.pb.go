// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.0
// source: auth/v1/auth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthCheckAuth = "/api.auth.v1.Auth/CheckAuth"
const OperationAuthCreateAuth = "/api.auth.v1.Auth/CreateAuth"
const OperationAuthDeleteAuth = "/api.auth.v1.Auth/DeleteAuth"
const OperationAuthGetAuth = "/api.auth.v1.Auth/GetAuth"
const OperationAuthListAuth = "/api.auth.v1.Auth/ListAuth"
const OperationAuthUpdateAuth = "/api.auth.v1.Auth/UpdateAuth"

type AuthHTTPServer interface {
	CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthReply, error)
	CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthReply, error)
	DeleteAuth(context.Context, *DeleteAuthRequest) (*DeleteAuthReply, error)
	GetAuth(context.Context, *GetAuthRequest) (*GetAuthReply, error)
	ListAuth(context.Context, *ListAuthRequest) (*ListAuthReply, error)
	UpdateAuth(context.Context, *UpdateAuthRequest) (*UpdateAuthReply, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth/create", _Auth_CreateAuth0_HTTP_Handler(srv))
	r.GET("/v1/auth/create/{name}/{id}", _Auth_CreateAuth1_HTTP_Handler(srv))
	r.POST("/v1/auth/update", _Auth_UpdateAuth0_HTTP_Handler(srv))
	r.GET("/v1/auth/update/{name}/{id}", _Auth_UpdateAuth1_HTTP_Handler(srv))
	r.POST("/v1/auth/delete", _Auth_DeleteAuth0_HTTP_Handler(srv))
	r.GET("/v1/auth/delete/{name}/{id}", _Auth_DeleteAuth1_HTTP_Handler(srv))
	r.POST("/v1/auth/delete", _Auth_GetAuth0_HTTP_Handler(srv))
	r.GET("/v1/auth/get/{name}/{id}", _Auth_GetAuth1_HTTP_Handler(srv))
	r.POST("/v1/auth/list", _Auth_ListAuth0_HTTP_Handler(srv))
	r.POST("/v1/auth/check", _Auth_CheckAuth0_HTTP_Handler(srv))
	r.GET("/v1/auth/check/{token}", _Auth_CheckAuth1_HTTP_Handler(srv))
}

func _Auth_CreateAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreateAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuth(ctx, req.(*CreateAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreateAuth1_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreateAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuth(ctx, req.(*CreateAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthUpdateAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAuth(ctx, req.(*UpdateAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateAuth1_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthUpdateAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAuth(ctx, req.(*UpdateAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAuth(ctx, req.(*DeleteAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteAuth1_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAuth(ctx, req.(*DeleteAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAuth(ctx, req.(*GetAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetAuth1_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAuth(ctx, req.(*GetAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthListAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuth(ctx, req.(*ListAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_CheckAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCheckAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckAuth(ctx, req.(*CheckAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_CheckAuth1_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCheckAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckAuth(ctx, req.(*CheckAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckAuthReply)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	CheckAuth(ctx context.Context, req *CheckAuthRequest, opts ...http.CallOption) (rsp *CheckAuthReply, err error)
	CreateAuth(ctx context.Context, req *CreateAuthRequest, opts ...http.CallOption) (rsp *CreateAuthReply, err error)
	DeleteAuth(ctx context.Context, req *DeleteAuthRequest, opts ...http.CallOption) (rsp *DeleteAuthReply, err error)
	GetAuth(ctx context.Context, req *GetAuthRequest, opts ...http.CallOption) (rsp *GetAuthReply, err error)
	ListAuth(ctx context.Context, req *ListAuthRequest, opts ...http.CallOption) (rsp *ListAuthReply, err error)
	UpdateAuth(ctx context.Context, req *UpdateAuthRequest, opts ...http.CallOption) (rsp *UpdateAuthReply, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...http.CallOption) (*CheckAuthReply, error) {
	var out CheckAuthReply
	pattern := "/v1/auth/check/{token}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthCheckAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...http.CallOption) (*CreateAuthReply, error) {
	var out CreateAuthReply
	pattern := "/v1/auth/create/{name}/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthCreateAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteAuth(ctx context.Context, in *DeleteAuthRequest, opts ...http.CallOption) (*DeleteAuthReply, error) {
	var out DeleteAuthReply
	pattern := "/v1/auth/delete/{name}/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDeleteAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetAuth(ctx context.Context, in *GetAuthRequest, opts ...http.CallOption) (*GetAuthReply, error) {
	var out GetAuthReply
	pattern := "/v1/auth/get/{name}/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGetAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListAuth(ctx context.Context, in *ListAuthRequest, opts ...http.CallOption) (*ListAuthReply, error) {
	var out ListAuthReply
	pattern := "/v1/auth/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthListAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdateAuth(ctx context.Context, in *UpdateAuthRequest, opts ...http.CallOption) (*UpdateAuthReply, error) {
	var out UpdateAuthReply
	pattern := "/v1/auth/update/{name}/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthUpdateAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
