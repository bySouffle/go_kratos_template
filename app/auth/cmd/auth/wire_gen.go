// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
	"go_kratos_template/app/auth/internal/biz"
	"go_kratos_template/app/auth/internal/conf"
	"go_kratos_template/app/auth/internal/data"
	"go_kratos_template/app/auth/internal/server"
	"go_kratos_template/app/auth/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(appInfo *conf.APPInfo, confServer *conf.Server, confData *conf.Data, logger log.Logger, tracerProvider *trace.TracerProvider, registry *conf.Registry, general *conf.General, experiment *conf.Experiment, security *conf.Security) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	authRepo := data.NewAuthRepo(dataData, logger)
	jwt := biz.NewJwt(security)
	authUseCase := biz.NewTAuthUseCase(authRepo, logger, jwt)
	authService := service.NewAuthService(authUseCase)
	httpServer := server.NewHTTPServer(confServer, general, experiment, authService, logger, tracerProvider)
	registrar := server.NewRegistrar(registry)
	app := newApp(appInfo, logger, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
